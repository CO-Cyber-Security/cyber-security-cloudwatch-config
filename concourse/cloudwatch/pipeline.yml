---
resources:
  - name: cyber-security-cloudwatch-config-git
    icon: github-circle
    type: git
    source:
      uri: https://github.com/alphagov/cyber-security-cloudwatch-config
      branch: master

  - name: cyber-security-terraform-git
    icon: github-circle
    type: git
    source:
      uri: git@github.com:alphagov/cyber-security-terraform.git
      branch: master
      private_key: ((cyber-security-terraform-deploy-key))
      paths:
        - service/cloudwatch-config/*

  - name: health-notification
    type: http-api
    source:
      uri: https://((health_host_prod))/?alert_type=concourse$&alert_name=health
      method: POST
      headers:
        Authorization: "Bearer ((health_token_prod))"
      json:
        service: "{service}"
        state: "{health}"
        message: "{message}"
        pipeline: "{BUILD_PIPELINE_NAME}"
        job: "{BUILD_JOB_NAME}"
        build_number: "{BUILD_NAME}"
      service: "health"

  - name: every-day-resource
    type: time
    icon: clock-outline
    source:
      interval: 24h

health_status_notify: &health_status_notify
  put: health-notification

resource_types:
  - name: http-api
    type: docker-image
    source:
      repository: gdscyber/http-api-resource
      tag: 1.0a

blocks:
  - config: &cloudwatch_build

      platform: linux

      image_resource:
        type: docker-image
        source:
            repository: gdscyber/concourse-worker-health
            tag: '1.2.8'

      inputs:
        - name: cyber-security-cloudwatch-config-git

jobs:
  - name: cloudwatch_test
    plan:
      - get: cyber-security-cloudwatch-config-git
        trigger: true
      - get: cyber-security-terraform-git
        trigger: false

      - task: test
        config:
          <<: *cloudwatch_build
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cd lambda/health_package
                make test
                echo "Tests completed"
            dir: cyber-security-cloudwatch-config-git
        on_failure:
          <<: *health_status_notify
          params:
            message: "Health package test failed"
            health: unhealthy

  - name: cloudwatch_deploy
    plan:
      - get: every-day-resource
        trigger: true
      - get: cyber-security-cloudwatch-config-git
        trigger: true
        passed:
          - cloudwatch_test
      - get: cyber-security-terraform-git
        trigger: true

      - task: terraform_deploy_keys
        config:
          <<: *cloudwatch_build
          outputs:
          - name: ssh
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cat > deploy_key <<'EOF'
                ((cyber-security-terraform-deploy-key))
                EOF
                echo "Host github.com" > config
                echo "  IdentityFile {workdir}/deploy_key" >> config
                echo "  StrictHostKeyChecking no" >> config
                chmod 400 deploy_key
            dir: ssh
        on_failure:
          <<: *health_status_notify
          params:
            message: "Failed to set SSH config"
            health: unhealthy

      - task: zip
        config:
          <<: *cloudwatch_build
          outputs:
          - name: lambda_package
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cd lambda/health_package
                make zip
                mv health_package.zip ../../../lambda_package
                echo "Built zip file lambda distribution"
                ls ../../..
            dir: cyber-security-cloudwatch-config-git
        on_failure:
          <<: *health_status_notify
          params:
            message: "Failed to build lambda zip file"
            health: unhealthy

      - task: terraform_account_validate
        config:
          <<: *cloudwatch_build
          inputs:
          - name: cyber-security-cloudwatch-config-git
          - name: cyber-security-terraform-git
          - name: ssh
          - name: lambda_package
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cd ..
                cp lambda_package/health_package.zip cyber-security-cloudwatch-config-git/lambda/health_package
                workdir=$(pwd)
                mkdir /root/.ssh
                sed 's+{workdir}+'"$workdir"'/ssh+g' ssh/config > /root/.ssh/config
                ln -fs ${workdir}/cyber-security-terraform-git/service/cloudwatch-config/per_account/deployments ${workdir}/cyber-security-cloudwatch-config-git/terraform/per_account
                monitored_accounts=$(ls cyber-security-terraform-git/service/cloudwatch-config/per_account/deployments)

                cd cyber-security-cloudwatch-config-git
                cd terraform/per_account/deployable

                for account_id in $monitored_accounts; do
                  target_arn="arn:aws:iam::${account_id}:role/HealthConcourseWorkerRole"
                  source sts-assume-role.sh $target_arn

                  terraform init -reconfigure -backend-config=../deployments/${account_id}/backend.tfvars
                  terraform validate
                done

                echo "Terraform valid"
            dir: cyber-security-cloudwatch-config-git
        on_failure:
          <<: *health_status_notify
          params:
            message: "Failed to validate account terraform"
            health: unhealthy

      - task: create_alarm_config
        config:
          <<: *cloudwatch_build
          inputs:
            - name: cyber-security-cloudwatch-config-git
            - name: cyber-security-terraform-git
          outputs:
            - name: deployments
          run:
            path: /bin/bash
            args:
              - -c
              - |
                monitored_accounts=$(ls ../cyber-security-terraform-git/service/cloudwatch-config/per_account/deployments)

                for account_id in $monitored_accounts; do

                 echo "Assume role"
                 target_arn="arn:aws:iam::${account_id}:role/HealthConcourseWorkerRole"
                 source sts-assume-role.sh $target_arn
                 source sts-get-caller-identity.sh

                 if [[ $account_id == $AWS_ASSUMED_ACCOUNT_ID ]]; then
                  echo $AWS_ASSUMED_ACCOUNT_ID
                  echo $AWS_ASSUMED_ROLE_ARN

                  cd lambda/health_package
                  make run
                  cd ../..
                 else
                  echo "FAILED TO ASSUME ${account_id}"
                 fi
                done

                cp -r terraform/per_account/deployments/* ../deployments

            dir: cyber-security-cloudwatch-config-git
        on_failure:
          <<: *health_status_notify
          params:
            message: "Failed to generate metric alarms"
            health: unhealthy

      - task: deploy_account_terraform_to_non_prod
        config:
          <<: *cloudwatch_build
          inputs:
            - name: cyber-security-cloudwatch-config-git
            - name: cyber-security-terraform-git
            - name: lambda_package
            - name: deployments
            - name: ssh
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cd ..
                workdir=$(pwd)
                cp lambda_package/health_package.zip cyber-security-cloudwatch-config-git/lambda/health_package
                mkdir /root/.ssh
                sed 's+{workdir}+'"$workdir"'/ssh+g' ssh/config > /root/.ssh/config
                ln -fs ${workdir}/cyber-security-terraform-git/service/cloudwatch-config/per_account/deployments ${workdir}/cyber-security-cloudwatch-config-git/terraform/per_account
                monitored_accounts=$(ls deployments)

                cd cyber-security-cloudwatch-config-git
                cd terraform/per_account/deployable

                for account_id in $monitored_accounts; do
                  ls ../deployments/${account_id}
                  env=$(grep DEF_ENVIRONMENT ../deployments/${account_id}/apply.tfvars | tr '"' ' ' | awk {' print $3 '})
                  echo "${account_id} is a ${env} environment"
                  if [[ $env != 'prod' ]]; then
                    target_arn="arn:aws:iam::${account_id}:role/HealthConcourseWorkerRole"
                    source sts-assume-role.sh $target_arn
                    terraform init -reconfigure -backend-config=../deployments/${account_id}/backend.tfvars
                    terraform apply -auto-approve -var-file=../deployments/${account_id}/apply.tfvars -var-file=${workdir}/deployments/${account_id}/alarms.tfvars
                  else
                    echo "${account_id} is a production account - Not deploying at this stage"
                  fi
                done
            dir: cyber-security-terraform-git
        attempts: 2
        on_failure:
          <<: *health_status_notify
          params:
            message: "Failed to deploy non-production cloudwatch alarms"
            health: unhealthy

      - task: deploy_account_terraform_to_prod
        config:
          <<: *cloudwatch_build
          inputs:
            - name: cyber-security-cloudwatch-config-git
            - name: cyber-security-terraform-git
            - name: lambda_package
            - name: deployments
            - name: ssh
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cd ..
                workdir=$(pwd)
                cp lambda_package/health_package.zip cyber-security-cloudwatch-config-git/lambda/health_package
                mkdir /root/.ssh
                sed 's+{workdir}+'"$workdir"'/ssh+g' ssh/config > /root/.ssh/config
                ln -fs ${workdir}/cyber-security-terraform-git/service/cloudwatch-config/per_account/deployments ${workdir}/cyber-security-cloudwatch-config-git/terraform/per_account
                monitored_accounts=$(ls deployments)

                cd cyber-security-cloudwatch-config-git
                cd terraform/per_account/deployable

                for account_id in $monitored_accounts; do
                  ls ../deployments/${account_id}
                  env=$(grep DEF_ENVIRONMENT ../deployments/${account_id}/apply.tfvars | tr '"' ' ' | awk {' print $3 '})
                  echo "${account_id} is a ${env} environment"
                  if [[ $env == 'prod' ]]; then
                    target_arn="arn:aws:iam::${account_id}:role/HealthConcourseWorkerRole"
                    source sts-assume-role.sh $target_arn
                    terraform init -reconfigure -backend-config=../deployments/${account_id}/backend.tfvars
                    terraform apply -auto-approve -var-file=../deployments/${account_id}/apply.tfvars -var-file=${workdir}/deployments/${account_id}/alarms.tfvars
                  else
                    echo "${account_id} is a production account - Not deploying at this stage"
                  fi
                done
            dir: cyber-security-terraform-git
        attempts: 2
        on_success:
          <<: *health_status_notify
          params:
            message: "Deployed production cloudwatch alarms"
            health: healthy
        on_failure:
          <<: *health_status_notify
          params:
            message: "Failed to deploy production cloudwatch alarms"
            health: unhealthy

  - name: health_monitor_deploy
    plan:
      - get: cyber-security-cloudwatch-config-git
        trigger: true
        passed:
          - cloudwatch_test
          - cloudwatch_deploy
      - get: cyber-security-terraform-git
        trigger: false

      - task: terraform_deploy_keys
        config:
          <<: *cloudwatch_build
          outputs:
            - name: ssh
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cat > deploy_key <<'EOF'
                ((cyber-security-terraform-deploy-key))
                EOF
                echo "Host github.com" > config
                echo "  IdentityFile {workdir}/deploy_key" >> config
                echo "  StrictHostKeyChecking no" >> config
                chmod 400 deploy_key
            dir: ssh
        on_failure:
          <<: *health_status_notify
          params:
            message: "Failed to set SSH config"
            health: unhealthy

      - task: zip
        config:
          <<: *cloudwatch_build
          outputs:
            - name: lambda_package
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cd lambda/health_package
                make zip
                mv health_package.zip ../../../lambda_package
                echo "Built zip file lambda distribution"
                ls ../../..
            dir: cyber-security-cloudwatch-config-git
        on_failure:
          <<: *health_status_notify
          params:
            message: "Failed to build lambda zip file"
            health: unhealthy

      - task: terraform_account_validate
        config:
          <<: *cloudwatch_build
          inputs:
            - name: cyber-security-cloudwatch-config-git
            - name: cyber-security-terraform-git
            - name: ssh
            - name: lambda_package
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cd ..
                cp lambda_package/health_package.zip cyber-security-cloudwatch-config-git/lambda/health_package
                workdir=$(pwd)
                mkdir /root/.ssh
                sed 's+{workdir}+'"$workdir"'/ssh+g' ssh/config > /root/.ssh/config
                ln -fs ${workdir}/cyber-security-terraform-git/service/cloudwatch-config/per_dashboard_environment/deployments ${workdir}/cyber-security-cloudwatch-config-git/terraform/per_dashboard_environment
                environment_accounts=$(ls cyber-security-terraform-git/service/cloudwatch-config/per_dashboard_environment/deployments)

                cd cyber-security-cloudwatch-config-git
                cd terraform/per_dashboard_environment/deployable

                for account_id in $environment_accounts; do
                  target_arn="arn:aws:iam::${account_id}:role/HealthConcourseWorkerRole"
                  source sts-assume-role.sh $target_arn

                  terraform init -reconfigure -backend-config=../deployments/${account_id}/backend.tfvars
                  terraform validate
                done

                echo "Terraform valid"
            dir: cyber-security-cloudwatch-config-git
        on_failure:
          <<: *health_status_notify
          params:
            message: "Failed to validate health monitor terraform"
            health: unhealthy

      - task: deploy_dashboard_terraform_to_non_prod
        config:
          <<: *cloudwatch_build
          inputs:
            - name: cyber-security-cloudwatch-config-git
            - name: cyber-security-terraform-git
            - name: lambda_package
            - name: ssh
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cd ..
                workdir=$(pwd)
                cp lambda_package/health_package.zip cyber-security-cloudwatch-config-git/lambda/health_package
                mkdir /root/.ssh
                sed 's+{workdir}+'"$workdir"'/ssh+g' ssh/config > /root/.ssh/config
                ln -fs ${workdir}/cyber-security-terraform-git/service/cloudwatch-config/per_dashboard_environment/deployments ${workdir}/cyber-security-cloudwatch-config-git/terraform/per_dashboard_environment

                monitored_accounts=$(ls cyber-security-terraform-git/service/cloudwatch-config/per_account/deployments | jq -scR 'split("\n")[:-1]')

                cd cyber-security-cloudwatch-config-git
                cd terraform/per_dashboard_environment/deployable
                dashboard_accounts=$(ls ../deployments)

                for account_id in $dashboard_accounts; do
                  ls ../deployments/${account_id}
                  env=$(grep DEF_ENVIRONMENT ../deployments/${account_id}/apply.tfvars | tr '"' ' ' | awk {' print $3 '})
                  echo "${account_id} is a ${env} environment"
                  if [[ $env != 'prod' ]]; then
                    target_arn="arn:aws:iam::${account_id}:role/HealthConcourseWorkerRole"
                    source sts-assume-role.sh $target_arn
                    terraform init -reconfigure -backend-config=../deployments/${account_id}/backend.tfvars
                    terraform apply -auto-approve -var-file=../deployments/${account_id}/apply.tfvars -var "monitored_accounts=${monitored_accounts}"
                  else
                    echo "${account_id} is a production account - Not deploying at this stage"
                  fi
                done
            dir: cyber-security-terraform-git
        on_failure:
          <<: *health_status_notify
          params:
            message: "Failed to deploy non-production health monitoring lambdas"
            health: unhealthy

      - task: deploy_dashboard_terraform_to_prod
        config:
          <<: *cloudwatch_build
          inputs:
            - name: cyber-security-cloudwatch-config-git
            - name: cyber-security-terraform-git
            - name: lambda_package
            - name: ssh
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cd ..
                workdir=$(pwd)
                cp lambda_package/health_package.zip cyber-security-cloudwatch-config-git/lambda/health_package
                mkdir /root/.ssh
                sed 's+{workdir}+'"$workdir"'/ssh+g' ssh/config > /root/.ssh/config
                ln -fs ${workdir}/cyber-security-terraform-git/service/cloudwatch-config/per_dashboard_environment/deployments ${workdir}/cyber-security-cloudwatch-config-git/terraform/per_dashboard_environment

                monitored_accounts=$(ls cyber-security-terraform-git/service/cloudwatch-config/per_account/deployments | jq -scR 'split("\n")[:-1]')

                cd cyber-security-cloudwatch-config-git
                cd terraform/per_dashboard_environment/deployable
                dashboard_accounts=$(ls ../deployments)

                for account_id in $dashboard_accounts; do
                  ls ../deployments/${account_id}
                  env=$(grep DEF_ENVIRONMENT ../deployments/${account_id}/apply.tfvars | tr '"' ' ' | awk {' print $3 '})
                  echo "${account_id} is a ${env} environment"
                  if [[ $env == 'prod' ]]; then
                    target_arn="arn:aws:iam::${account_id}:role/HealthConcourseWorkerRole"
                    source sts-assume-role.sh $target_arn
                    terraform init -reconfigure -backend-config=../deployments/${account_id}/backend.tfvars
                    terraform apply -auto-approve -var-file=../deployments/${account_id}/apply.tfvars -var "monitored_accounts=${monitored_accounts}"
                  else
                    echo "${account_id} is a production account - Not deploying at this stage"
                  fi
                done
            dir: cyber-security-terraform-git

        on_success:
          <<: *health_status_notify
          params:
            message: "Successfully deployed production health monitoring lambdas"
            health: healthy

        on_failure:
          <<: *health_status_notify
          params:
            message: "Failed to deploy non-production health monitoring lambdas"
            health: unhealthy
